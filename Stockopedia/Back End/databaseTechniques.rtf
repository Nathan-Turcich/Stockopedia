{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21240\viewh9280\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 Database Techniques:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Indexing:
\f1\b0 \
We created an index for the Stocks table on the \'91abbr\'92 row.  This row is called throughout the app with many different queries.  We use the abbr to get the data from the row of Stocks table.  By creating an index we made it faster to receive the details of the stocks.  A main source of speed happens when a user clicks on a specific stock.  When this happens we must, query all 600,000 rows of the table \'91Stocks\'92 for all values with that specific abbr.  This gives the user the information faster now.  \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Constraints:\

\f1\b0 We have added constraints on our RealTimeStocks table. We added constraints on the rows abbr, full name, date, open, close, low, high, volume, mrktcap, and diff.  We added the default constraints on these rows so that if the data is corrupt and not given the default value will be \'93N/A\'94.  This is an important aspect of our project since without this constraint, if the yahoo finance changes its HTML we may get no values.  If we have no values then our app will crash if only one value in the RealTimeStocks table is not there. Since we download the entire table in our app.  
\f0\b \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Views:\

\f1\b0 We have created two views on our RealTimeStocks table. We created both of our views to help users decide whether a stock was a \'93Buy\'94 or a \'93Sell\'94. The first view we created was to find any stocks where the daily difference was above the average of the daily difference of all stocks. If a stock was returned from this query, it meant it was a \'93Buy\'94. The second view we created was to find any stocks where the daily difference was below the average of the daily difference of all stocks. If a stock is returned from this query, it means that it is a \'93Sell\'94. These two views allow us to quickly make a simple query in our PHP script to determine if a stock is a \'93Buy\'94 or a \'93Sell\'94.
\f0\b \
\
Triggers:
\f1\b0 \
One of our major issues with our project was with deleting data off our Maria DB.  Our project\'92s primary source of data is from our Kaggle data set that is inputted in to the Stocks table.  From our Stocks Table we produce URL\'92s to get the RealTimeStocks and also Favorites rely on Stocks Table.  Because of this, we had issues when we would delete data from the Stocks table for debugging and having irregular characters.  This would mess up our database because then the data  would still be in the Favorites Table and the RealTimeStocks Table.  This would cause the data to be inconsistent throughout the app and would cause crashes everywhere.  Because of this we created a trigger that deletes the data stock in every table if it is deleted in the Stocks Table.  This trigger has greatly helped us debugging and has made the app have cleaner data.  \
\

\f0\b Stored Procedures:
\f1\b0 \
A query we frequently used throughout our project was one that returned all unique stock symbols and names. This query could take awhile because it had to go through our Stock table which had over 500,000 records to get the unique names. In order to help speed this up, we created a stored procedure. In addition to speeding up the query, it also made it very easy for us to call in our PHP script. Instead of writing out a large SQL query, all we had to do was write a single line of clean code.}